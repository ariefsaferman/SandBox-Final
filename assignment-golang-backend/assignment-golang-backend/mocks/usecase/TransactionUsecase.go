// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	dto "git.garena.com/sea-labs-id/batch-05/arief-saferman/assignment-golang-backend/dto"
	entity "git.garena.com/sea-labs-id/batch-05/arief-saferman/assignment-golang-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// TransactionUsecase is an autogenerated mock type for the TransactionUsecase type
type TransactionUsecase struct {
	mock.Mock
}

// GetListHistoryTransaction provides a mock function with given fields: idLogin, search, sortBy, sort, limit
func (_m *TransactionUsecase) GetListHistoryTransaction(idLogin uint, search string, sortBy string, sort string, limit string) ([]*entity.Transaction, error) {
	ret := _m.Called(idLogin, search, sortBy, sort, limit)

	var r0 []*entity.Transaction
	if rf, ok := ret.Get(0).(func(uint, string, string, string, string) []*entity.Transaction); ok {
		r0 = rf(idLogin, search, sortBy, sort, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string, string, string, string) error); ok {
		r1 = rf(idLogin, search, sortBy, sort, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopUp provides a mock function with given fields: tr, idLogin
func (_m *TransactionUsecase) TopUp(tr *dto.TopUpRequest, idLogin uint) (*dto.TopUpRespon, error) {
	ret := _m.Called(tr, idLogin)

	var r0 *dto.TopUpRespon
	if rf, ok := ret.Get(0).(func(*dto.TopUpRequest, uint) *dto.TopUpRespon); ok {
		r0 = rf(tr, idLogin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TopUpRespon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.TopUpRequest, uint) error); ok {
		r1 = rf(tr, idLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: tr, idLogin, receiver
func (_m *TransactionUsecase) Transfer(tr *dto.TransferRequest, idLogin uint, receiver uint) (*dto.TransferRespon, error) {
	ret := _m.Called(tr, idLogin, receiver)

	var r0 *dto.TransferRespon
	if rf, ok := ret.Get(0).(func(*dto.TransferRequest, uint, uint) *dto.TransferRespon); ok {
		r0 = rf(tr, idLogin, receiver)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TransferRespon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.TransferRequest, uint, uint) error); ok {
		r1 = rf(tr, idLogin, receiver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionUsecase creates a new instance of TransactionUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionUsecase(t mockConstructorTestingTNewTransactionUsecase) *TransactionUsecase {
	mock := &TransactionUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
