// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	entity "git.garena.com/sea-labs-id/batch-05/arief-saferman/assignment-golang-backend/entity"
	mock "github.com/stretchr/testify/mock"
)

// UtilRepository is an autogenerated mock type for the UtilRepository type
type UtilRepository struct {
	mock.Mock
}

// ComparePassword provides a mock function with given fields: hashedPwd, inputPwd
func (_m *UtilRepository) ComparePassword(hashedPwd string, inputPwd string) bool {
	ret := _m.Called(hashedPwd, inputPwd)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hashedPwd, inputPwd)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GenerateAccessToken provides a mock function with given fields: user
func (_m *UtilRepository) GenerateAccessToken(user *entity.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(*entity.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUtilRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUtilRepository creates a new instance of UtilRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUtilRepository(t mockConstructorTestingTNewUtilRepository) *UtilRepository {
	mock := &UtilRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
