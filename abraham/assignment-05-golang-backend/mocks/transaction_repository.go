// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "git.garena.com/sea-labs-id/batch-02/yusuf-kristanto/assignment-05-golang-backend/models"
	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: transaction
func (_m *TransactionRepository) CreateTransaction(transaction *models.Transaction) (*models.Transaction, error) {
	ret := _m.Called(transaction)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(*models.Transaction) *models.Transaction); ok {
		r0 = rf(transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Transaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFundSourceType provides a mock function with given fields: id
func (_m *TransactionRepository) GetFundSourceType(id int) (*models.FundSource, error) {
	ret := _m.Called(id)

	var r0 *models.FundSource
	if rf, ok := ret.Get(0).(func(int) *models.FundSource); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FundSource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryTransactions provides a mock function with given fields: walletNumber, search, sort, sortBy, size, page
func (_m *TransactionRepository) QueryTransactions(walletNumber int, search string, sort string, sortBy string, size int, page int) ([]*models.Transaction, error) {
	ret := _m.Called(walletNumber, search, sort, sortBy, size, page)

	var r0 []*models.Transaction
	if rf, ok := ret.Get(0).(func(int, string, string, string, int, int) []*models.Transaction); ok {
		r0 = rf(walletNumber, search, sort, sortBy, size, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string, string, int, int) error); ok {
		r1 = rf(walletNumber, search, sort, sortBy, size, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionRepository(t mockConstructorTestingTNewTransactionRepository) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
