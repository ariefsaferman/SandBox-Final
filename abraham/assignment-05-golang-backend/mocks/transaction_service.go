// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dtos "git.garena.com/sea-labs-id/batch-02/yusuf-kristanto/assignment-05-golang-backend/dtos"
	mock "github.com/stretchr/testify/mock"

	models "git.garena.com/sea-labs-id/batch-02/yusuf-kristanto/assignment-05-golang-backend/models"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// GetTransactions provides a mock function with given fields: id, sortBy, sort, search, page
func (_m *TransactionService) GetTransactions(id int, sortBy string, sort string, search string, page int) ([]*models.Transaction, error) {
	ret := _m.Called(id, sortBy, sort, search, page)

	var r0 []*models.Transaction
	if rf, ok := ret.Get(0).(func(int, string, string, string, int) []*models.Transaction); ok {
		r0 = rf(id, sortBy, sort, search, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string, string, int) error); ok {
		r1 = rf(id, sortBy, sort, search, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopUp provides a mock function with given fields: topUpRequest, id
func (_m *TransactionService) TopUp(topUpRequest dtos.TopUpRequest, id int) (*models.Transaction, error) {
	ret := _m.Called(topUpRequest, id)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(dtos.TopUpRequest, int) *models.Transaction); ok {
		r0 = rf(topUpRequest, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dtos.TopUpRequest, int) error); ok {
		r1 = rf(topUpRequest, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: transferRequest, id
func (_m *TransactionService) Transfer(transferRequest dtos.TransferRequest, id int) (*models.Transaction, error) {
	ret := _m.Called(transferRequest, id)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(dtos.TransferRequest, int) *models.Transaction); ok {
		r0 = rf(transferRequest, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dtos.TransferRequest, int) error); ok {
		r1 = rf(transferRequest, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionService(t mockConstructorTestingTNewTransactionService) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
