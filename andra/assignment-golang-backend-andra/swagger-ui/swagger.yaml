openapi: 3.0.3
info:
  title: E-Wallet API
  description: E-wallet provides API for doing authentication and transaction
  termsOfService: http://swagger.io/terms/
  contact:
    email: nugraha.andra@shopee.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080
tags:
  - name: auth
    description: Everything about authentication
  - name: user
    description: Everything about user
  - name: transaction
    description: Everything about transaction
paths:
  /register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Create new user and its wallet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterApiResponse'      
        '500':
          description: Internal server error
  /login:
    post:
      tags:
        - auth
      summary: Authenticate user
      description: Authenticate user and retrieve access token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginApiResponse'      
        '400':
          description: Bad request when user not found or password mismatch
        '500':
          description: Internal server error
  /user:
    get:
      tags:
        - user
      summary: Get user auth detail
      description: Retrieve logged in user detail including its wallet
      security: 
        - BearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailApiResponse'      
        '400':
          description: Bad request when user not found
        '500':
          description: Internal server error
  /transactions:
    get:
      tags:
        - transaction
      summary: Get user auth transactions
      description: Retrieve logged in user's transactions, default 10 records sorted by date desc
      security: 
        - BearerAuth: []
      parameters:
        - in: query
          name: s
          schema:
            type: string
          description: The keyword to search in transaction description
        - in: query
          name: sortBy
          schema:
            type: string
          description: The column to sort the list by. Default is set to date
        - in: query
          name: sort
          schema:
            type: string
          description: The direction of column sort. Default is set to desc
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return. Default is set to 10
        - in: query
          name: page
          schema:
            type: integer
          description: The page of items to collect the result set. Default is set to 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransactionsApiResponse'
        '500':
          description: Internal server error
  /transactions/top-up:
    post:
      tags:
        - transaction
      summary: Top up user balance
      description: Add balance to user's wallet
      security: 
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopUpRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopUpApiResponse'
        '400':
          description: Bad request when source of fund or wallet not found
        '500':
          description: Internal server error
  /transactions/transfer:
    post:
      tags:
        - transaction
      summary: Transfer balance to other user
      description: Add balance to target's wallet and reduce user's wallet balance
      security: 
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferApiResponse'
        '400':
          description: Bad request when recipient wallet not found or sender balance is insufficient
        '500':
          description: Internal server error
components:
  schemas:
    AuthRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: test@shopee.com
        password:
          type: string
          example: testpassword
    RegisterResponse:
      required:
        - id
        - email
        - walletId
      type: object
      properties:
        id:
          type: integer
          format: int
          example: 1
        email:
          type: string
          example: test@shopee.com
        walletId:
          type: integer
          format: int
          example: 157001
    RegisterApiResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/RegisterResponse'
    LoginResponse:
      required:
        - accessToken
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImVtYWlsIjoiYW5kcmFAZ21haWwuY29tIiwid2FsbGV0SWQiOjE1NzAwMSwiaXNzIjoiYW5kcmFAZ21haWwuY29tIiwiZXhwIjoxNjcxMDM4NTAyLCJpYXQiOjE2NzEwMzQ5MDJ9.VPoZNhTpu7BWWXZOA8R1WCXkS-vt6pkXuFL5Zd_IWgc
    LoginApiResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/LoginResponse'
    Wallet:
      type: object
      properties:
        id:
          type: integer
          format: int
          example: 157001
        balance:
          type: integer
          format: float64
          example: 1000000.00
    UserDetailResponse:
      type: object
      properties:
        id:
          type: integer
          format: int
          example: 1
        email:
          type: string
          example: test@shopee.com
        wallet:
          $ref: '#/components/schemas/Wallet'
    UserDetailApiResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserDetailResponse'
    TopUpRequest:
      type: object
      properties:
        amount:
          type: integer
          format: float64
          example: 1000000.00
        sourceOfFundId:
          type: integer
          format: int
          example: 1
    TopUpResponse:
      type: object
      properties:
        id:
          type: integer
          format: int
          example: 1
        sourceOfFundId:
          type: integer
          format: int
          example: 1
        recipientId:
          type: integer
          format: int
          example: 157002
        amount:
          type: integer
          format: float64
          example: 157002
        description:
          type: string
          example: Top Up from Bank Transfer
        date:
          type: string
          format: date-time
    TopUpApiResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TopUpResponse'
    TransferRequest:
      type: object
      properties:
        amount:
          type: integer
          format: float64
          example: 1000000.00
        to:
          type: integer
          format: int
          example: 157002
        description:
          type: string
          example: description
    TransferResponse:
      type: object
      properties:
        id:
          type: integer
          format: int
          example: 1
        senderId:
          type: integer
          format: int
          example: 157001
        recipientId:
          type: integer
          format: int
          example: 157002
        amount:
          type: integer
          format: float64
          example: 1000000.00
        description:
          type: string
          example: description
        date:
          type: string
          format: date-time
    TransferApiResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TransferResponse'
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int
          example: 1
        sourceOfFundId:
          type: integer
          format: int
          example: 1
        senderId:
          type: integer
          format: int
          example: 157001
        recipientId:
          type: integer
          format: int
          example: 157002
        amount:
          type: integer
          format: float64
          example: 1000000.00
        description:
          type: string
          example: description
        date:
          type: string
          format: date-time
    GetTransactionsApiResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer