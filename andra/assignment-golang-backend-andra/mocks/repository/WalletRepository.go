// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	entity "git.garena.com/sea-labs-id/batch-05/assignment-golang-backend/entity"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// WalletRepository is an autogenerated mock type for the WalletRepository type
type WalletRepository struct {
	mock.Mock
}

// AddBalance provides a mock function with given fields: tx, walletId, amount
func (_m *WalletRepository) AddBalance(tx *gorm.DB, walletId uint, amount float64) error {
	ret := _m.Called(tx, walletId, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, float64) error); ok {
		r0 = rf(tx, walletId, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeductBalance provides a mock function with given fields: tx, walletId, amount
func (_m *WalletRepository) DeductBalance(tx *gorm.DB, walletId uint, amount float64) error {
	ret := _m.Called(tx, walletId, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, float64) error); ok {
		r0 = rf(tx, walletId, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: walletId
func (_m *WalletRepository) GetById(walletId uint) (*entity.Wallet, error) {
	ret := _m.Called(walletId)

	var r0 *entity.Wallet
	if rf, ok := ret.Get(0).(func(uint) *entity.Wallet); ok {
		r0 = rf(walletId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(walletId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: tx, userId
func (_m *WalletRepository) Register(tx *gorm.DB, userId uint) (*entity.Wallet, error) {
	ret := _m.Called(tx, userId)

	var r0 *entity.Wallet
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *entity.Wallet); ok {
		r0 = rf(tx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWalletRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletRepository creates a new instance of WalletRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletRepository(t mockConstructorTestingTNewWalletRepository) *WalletRepository {
	mock := &WalletRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
